/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mouserserver;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import java.awt.AWTException;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.InputEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author Nstd
 */
public class MouserServer extends javax.swing.JFrame {

    private Dimension dim; //存储屏幕尺寸
    private Robot robot;//自动化对象

    public ServerInfo server = new ServerInfo();
    private List<ClientInfo> client = new ArrayList<>();
    private Map<String, ClientInfo> clientMap = new HashMap<>();
    private ClientListenerThread clientListener;
    private ServerThread serverThread;
    private String currentClientAddress;
    
    
    private static int clientIds = 0;
    
    int a = 0;
    /**
     * Creates new form MouserServer
     */
    public MouserServer() {
        initComponents();
//        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            @Override
             public void windowClosing(WindowEvent e) { 
                 if(clientListener != null) {
                    clientListener.interrupt();
                 }
             }
        });
        
        getScreenInfo();
        
        Insets   screenInsets   =   Toolkit.getDefaultToolkit().getScreenInsets(getGraphicsConfiguration());
        //取得底部边界高度，即任务栏高度   
        int taskHeight = screenInsets.bottom;   
        int left = dim.width - this.getWidth();
        int top = dim.height - this.getHeight() - taskHeight;
        this.setLocation(left, top); 
        
        if(!initRobot()) {
            log("获取鼠标信息失败");
        }

        if(!getServerInfo()) {
            log("获取服务器信息失败");
        }
        
        clientListener = new ClientListenerThread(this);
        clientListener.start();
        log("等待客户端接入..");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clientDropBox = new javax.swing.JComboBox<>();
        confirmBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        cleanLogBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logConsole = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("远程鼠标-Server");

        clientDropBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "客户端列表" }));

        confirmBtn.setText("确定");
        confirmBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                confirmBtnMouseClicked(evt);
            }
        });

        cancelBtn.setText("取消");
        cancelBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelBtnMouseClicked(evt);
            }
        });

        cleanLogBtn.setText("清空日志");
        cleanLogBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cleanLogBtnMouseClicked(evt);
            }
        });

        logConsole.setEditable(false);
        logConsole.setColumns(20);
        logConsole.setRows(5);
        jScrollPane1.setViewportView(logConsole);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(clientDropBox, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(confirmBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 168, Short.MAX_VALUE)
                        .addComponent(cleanLogBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clientDropBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmBtn)
                    .addComponent(cancelBtn)
                    .addComponent(cleanLogBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void confirmBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmBtnMouseClicked
        if(clientDropBox.getSelectedIndex() > 0) {
            String[] s = clientDropBox.getSelectedItem().toString().split(":");
            if(s.length > 1) {
                currentClientAddress = s[0];
            }
        }
    }//GEN-LAST:event_confirmBtnMouseClicked

    private void cleanLogBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cleanLogBtnMouseClicked
        logConsole.setText("");
    }//GEN-LAST:event_cleanLogBtnMouseClicked

    private void cancelBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelBtnMouseClicked
        if(serverThread != null) {
            serverThread.close();
            serverThread.interrupt();
            log("已断开与客户端的连接!");
        } else {
            log("没有已连接客户端连接!");
        }
    }//GEN-LAST:event_cancelBtnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MouserServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MouserServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MouserServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MouserServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MouserServer().setVisible(true);
            }
        });
    }
    
    public class ServerThread extends Thread {

    	static final int INPORT = 1713;
        static final long TIME_OUT_TIME = 30 * 1000; //客户端连接超时时间
        
        private MouserServer parent;
        private int mClientId = -1;
        private String mClientIp = "";
        private ServerSocket ss;
        private Socket client;
        private BufferedReader in = null;
        private long mStartTime = System.currentTimeMillis();
        private Map<String, Controller> controlMap;
        
        public ServerThread() {}
        
        public ServerThread(MouserServer main, int clientId, String clientIp) {
            parent = main;
            mClientId = clientId;
            mClientIp = clientIp;
            initController();
            try {
                ss = new ServerSocket(INPORT);
            } catch (Exception e) {
                parent.log(e);
            }
        }
        
        private void initController() {
            controlMap = new HashMap<>();
            // leftClick
            controlMap.put("lc", new Controller() {
                @Override
                public void doIt(int... args) {
                    parent.log("leftClick");
                    parent.CLeftClick();
                }
            });
            
            // rightClick
            controlMap.put("rc", new Controller() {
                @Override
                public void doIt(int... args) {
                    parent.log("rightClick");
                    parent.CRightClick();
                }
            });
            
            //doubleClick
            controlMap.put("dc", new Controller() {
                @Override
                public void doIt(int... args) {
                    parent.log("doubleClick");
                    parent.CDoubleClick();
                }
            });
            
            //dragStart
            controlMap.put("ds", new Controller() {
                @Override
                public void doIt(int... args) {
                    parent.log("dragStart");
                    parent.CLeftPress();
                }
            });
            
            //move
            controlMap.put("m", new Controller() {
                @Override
                public void doIt(int... args) {
                    if(args != null && args.length >= 1) {
                    parent.log("move:" + args[0] + "," + args[1]);
                        parent.CMove(args[0], args[1]);
                    }
                }
            });
            
            //dragEnd
            controlMap.put("de", new Controller() {
                @Override
                public void doIt(int... args) {
                    parent.log("dragEnd");
                    parent.CLeftRelease();
                }
            });
            
            //verticalScroll
            controlMap.put("vs", new Controller() {
                @Override
                public void doIt(int... args) {
                    parent.log("verticalScroll");
                    parent.CWheel(1);
                }
            });
            
            //horizentalScrollStart
            controlMap.put("hss", new Controller() {
                @Override
                public void doIt(int... args) {
                    parent.log("horizentalScrollStart");
                    parent.CWheelPress();
                }
            });
            
            //horizentalScrollEnd
            controlMap.put("hse", new Controller() {
                @Override
                public void doIt(int... args) {
                    parent.log("horizentalScrollEnd");
                    parent.CWheelRelease();
                }
            });
        }
        
        public void close() {
            if(ss != null) {
                try {
                    ss.close();
                    this.interrupt();
                } catch (IOException ex) {
                    parent.log(ex);
                }
            }
        }
        
        @Override
        public void run() {
            if(ss == null) return ;
            
            try {
                while(!this.isInterrupted()) {
                    DatagramSocket ds = new DatagramSocket();
                    InetAddress clientAddress = InetAddress.getByName("localhost");
                    String outMsg = "start";
                    ds.send(Dgram.toDatagram(outMsg, clientAddress, ClientListenerThread.INPORT));
                    ds.close();
                    
                    client = waitForClientConn();
                    if(client == null) {
                        releaseSocket();
                        break;
                    }
                    in = new BufferedReader(new InputStreamReader(client.getInputStream()));
                    getMessage();
                }
            } catch (Exception e) {
                parent.log(e);
            }
        }
        
        private Socket waitForClientConn() {
            Socket s = null;
            try {
                parent.log("等待客户端[" + mClientIp + "]连入..");
                while(!this.isInterrupted()) {
                    s = ss.accept();
                    if(mClientIp.equals(s.getInetAddress().getHostAddress())) {
                        parent.log("客户端[" + mClientIp + "]已连接!");
                        break;
                    }
                    s.close();
                }
            } catch (Exception e) {
                parent.log(e);
            }
            return s;
        }
        
        private void getMessage() {
            String msg = "";
            try {
                while((msg = in.readLine()) != null && !this.isInterrupted()) {
                    if(msg.trim().equals("exit")) {
                        parent.log("客户端[" + mClientIp + "] 已断开链接!");
                        break;
                    } else {
                        analysisMsg(msg);
                    }
                }
            } catch (Exception e) {
                parent.log(e);
            } finally {
                try {
                    in.close();
                    client.close();
                } catch (IOException ex) {
                    parent.log(ex);
                }
            }
            releaseSocket();
        }
        
        private void releaseSocket() {
            if(this.isInterrupted()) {
                try {
                    if(ss != null && !ss.isClosed()) {
                        ss.close();
                    }
                } catch (IOException ex) {
                    parent.log(ex);
                }
            }
        }
        
        private void analysisMsg(String msg) {
            try {
                parent.log(msg);
                String[] s = msg.split(":");
                if(controlMap.containsKey(s[0])) {
                    Controller c = controlMap.get(s[0]);
                    int[] args = null;
                    if(s.length > 1) {
                        args = new int[s.length - 1];
                        for(int i=1; i<s.length; i++) {
                            args[i-1] = Integer.parseInt(s[i]);
                        }
                    }
                    c.doIt(args);
                }
            } catch (Exception e) {
                parent.log(e);
            }
        }
        
        public class Controller {
            public void doIt(int... args) {}
        }
    }

    public class ClientListenerThread extends Thread {
    	
    	private MouserServer parent;
    	
    	static final int INPORT = 1712;
		private byte[] buf = new byte[1000];
	    private DatagramPacket dp = new DatagramPacket(buf, buf.length);
	    private DatagramSocket socket;
    	
    	public ClientListenerThread() {}
    	
    	public ClientListenerThread(MouserServer main) {
    		parent = main;
    	}
    	
    	@Override
    	public void run() {
            try {
                socket = new DatagramSocket(INPORT);
                parent.log("开始监听端口:" + INPORT);
                while(true) {
                     socket.receive(dp);
                    //接收到客户端的消息
                    String msg = Dgram.toString(dp).trim();
                    String rcvd = msg + ",from address:"
                            + dp.getAddress() + ",port:" + dp.getPort();
                    parent.log("From Client:"+rcvd);

                    ClientInfo clientInfo = new ClientInfo();
                    clientInfo.name = dp.getAddress().getHostName();
                    clientInfo.ip = dp.getAddress().getHostAddress();
                    clientInfo.port = dp.getPort();

                    parent.addClient(clientInfo);
                    
                    DatagramPacket echo;
                    System.out.println("msg=" + msg
                            + " ir=" + "request".equals(msg)
                            + " ca=" + currentClientAddress 
                            + " da=" + dp.getAddress().getHostAddress()
                            + " eq=" + dp.getAddress().getHostAddress().equals(currentClientAddress));
                    if("request".equals(msg)
                            && currentClientAddress != null 
                            && dp.getAddress().getHostAddress().equals(currentClientAddress)) {
                        
                        if(serverThread != null) {
                            serverThread.close();
                            serverThread.interrupt();
                        }
                        serverThread = new ServerThread(parent, clientIds++, currentClientAddress);
                        serverThread.start();
                        Thread.sleep(200);
                        echo = Dgram.toDatagram("start", dp.getAddress(), dp.getPort());
                    } else {
                        echo = Dgram.toDatagram(server.toJsonStr(),
                                dp.getAddress(), dp.getPort());
                    }
                    //将数据包发送给客户端
                    socket.send(echo);
                }
            } catch (Exception e) {
                parent.log(e);
            }
	}
    }
    
    public synchronized void addClient(ClientInfo c) {
        client.add(c);
        String key = c.name + ":" + c.ip;
        if(!clientMap.containsKey(key)) {
            clientMap.put(key, c);
            clientDropBox.addItem(c.name + ":" + c.ip);
        }
        //改变界面上的client列表
    }

    public void getScreenInfo() {
        dim = Toolkit.getDefaultToolkit().getScreenSize();
        log("当前屏幕大小为：" + (int)dim.getWidth() + "x" + (int)dim.getHeight());
    }

    public boolean initRobot() {
        try{
            robot = new Robot();
            return true;
        }catch(AWTException e){
            e.printStackTrace();
        }

        return false;
    }

    public boolean getServerInfo() {
        InetAddress ia = null;
        try {
                ia = InetAddress.getLocalHost();
                server.name = ia.getHostName();
                server.ip = ia.getHostAddress();
                log("服务器名称：[ " + server.name + " ]  ip：[ " + server.ip + " ]");
                return true;
        } catch (Exception e) {
                log(e.getMessage());
        }

        return false;
    }
        
    //鼠标移动函数   
    public void CMove(int width,int heigh){     
//        System.out.println("enter Move()...");
        Point mousepoint = MouseInfo.getPointerInfo().getLocation();
//          System.out.println("移动前坐标：" + mousepoint.x + " " + mousepoint.y);
          width += mousepoint.x;
          heigh += mousepoint.y;
        try{
            robot.mouseMove(width,heigh);
        }catch(Exception e){
            log(e);
        }
//        System.out.println("移动后坐标：" + width + " " + heigh);
    }
    
    // 鼠标左击
    public void CLeftClick() {
        CClick(InputEvent.BUTTON1_MASK);
    }
    
    //鼠标右击
    public void CRightClick() {
        CClick(InputEvent.BUTTON3_MASK);
    }
    
    //点击鼠标
    public void CClick(int mouseType) {
        try {
            robot.mousePress(mouseType);
            robot.mouseRelease(mouseType);
        }catch(Exception e) {
            log(e);
        }
    }
    
    //按下鼠标左键
    public void CLeftPress() {
        CPress(InputEvent.BUTTON1_MASK);
    }
    
    //释放鼠标左键
    public void CLeftRelease() {
        CRelease(InputEvent.BUTTON1_MASK);
    }
    
    //按下鼠标中键
    public void CWheelPress() {
        CPress(InputEvent.BUTTON2_MASK);
    }
    
    //释放鼠标中键
    public void CWheelRelease() {
        CRelease(InputEvent.BUTTON2_MASK);
    }
    
    //按下鼠标
    private void CPress(int mouseType) {
        try {
            robot.mousePress(mouseType);
        }catch(Exception e) {
            log(e);
        }
    }
    
    //释放鼠标
    private void CRelease(int mouseType) {
        try {
            robot.mouseRelease(mouseType);
        }catch(Exception e) {
            log(e);
        }
    }
    
    //双击
    public void CDoubleClick() {
        try {
            robot.mousePress(InputEvent.BUTTON1_MASK);
            robot.mouseRelease(InputEvent.BUTTON1_MASK);
            robot.delay(100);
            robot.mousePress(InputEvent.BUTTON1_MASK);
            robot.mouseRelease(InputEvent.BUTTON1_MASK);
        }catch(Exception e) {
            log(e);
        }
    }
    
    //滚动滑轮（y > 0: 上滑； y < 0: 下滑）
    public void CWheel(int y) {
        try {
            robot.mouseWheel(y);
        }catch(Exception e) {
            log(e);
        }
    }
    
    
    public void log(String msg) {
    	logConsole.append(msg + "\n");
    }
    
    public void log(Exception e) {
        logConsole.append(e.getMessage() + "\n");
        e.printStackTrace();
    }
    
    public static class ClientInfo {
    	public String name = "unknow";
    	public String ip = "unknow";
    	public int port = -1;
    	
    	public static ClientInfo fromJsonStr(String json) {
    		ClientInfo clientInfo = new ClientInfo();
    		try {
    			clientInfo = JSON.parseObject(json, ClientInfo.class);
    		} catch(Exception e) {
    			e.printStackTrace();
    		}
    		return clientInfo;
    	}

    	public String toJsonStr() {
    		JSONObject obj = new JSONObject();
    		obj.put("name", name);
    		obj.put("ip", ip);
    		obj.put("port", port);
    		return obj.toJSONString();
    	}
    }
    
    public class ServerInfo {
    	public String name = "unknow";
    	public String ip = "unknow";
    	
    	public String toJsonStr() {
    		JSONObject obj = new JSONObject();
    		obj.put("name", name);
    		obj.put("ip", ip);
    		return obj.toJSONString();
    	}
    }
    
    public static class Dgram {

        public static DatagramPacket toDatagram(String s, InetAddress destIA,
                int destPort) {
            byte[] buf = new byte[s.length() + 1];
            s.getBytes(0, s.length(), buf, 0);
            return new DatagramPacket(buf, buf.length, destIA, destPort);
        }

        public static String toString(DatagramPacket p) {
            return new String(p.getData(), 0, p.getLength());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton cleanLogBtn;
    private javax.swing.JComboBox<String> clientDropBox;
    private javax.swing.JButton confirmBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logConsole;
    // End of variables declaration//GEN-END:variables
}
